@using Aspose.Cells.Common.Config
@model Aspose.Cells.Common.Models.ViewModel

@{
	Layout = "~/Pages/Shared/Layout.cshtml";
}
@{
	ViewBag.Title = "Watermark";
}

<div class="container-fluid asposetools">
	<div class="container">
		<div class="row">
			<div class="col-md-12">

				<h1 id="ProductTitle">@Model.Title</h1>
				<h2 id="ProductTitleSub">@Model.TitleSub</h2>


				<div id="WorkPlaceHolder">
					<form id="UploadFile" name="UploadFile" method="POST" enctype="multipart/form-data">
						@if (false)@*Configuration.IsAsposeCloudApp*@
						{
							<div>
								<h2 id="CloudAppTitleSub">
									Use the following Aspose.Cells Cloud APIs to implement this App. Related
									<a class="text-dark" href="@Configuration.CellsCloudAPIMethodDocument" target="_blank" style="color: #333333; font-weight: 700">
										online documents.
									</a>
								</h2>
								<table class="table table-condensed  center-block" style="width:65% ">

									<tbody style="background: white;">
										@foreach (var cellsCloudAPIDef in Model.CellsCloudAPIDefs)
										{
											<tr>
												<td class="language-html text-left" title="@cellsCloudAPIDef.ApiName" style="text-overflow:ellipsis;width:300px">@cellsCloudAPIDef.ApiName</td>
												<td class="language-html text-left" title="@cellsCloudAPIDef.ApiUri" style="text-overflow:ellipsis;width:75%">
													<a href="@cellsCloudAPIDef.ApiReferenceUri" target="_blank" style="color: #333333">
														@cellsCloudAPIDef.ApiUri
													</a>
												</td>
											</tr>

										}
									</tbody>
								</table>
							</div>

						}
						<div class="terms-area">
							<span>*By uploading your files or using our service you agree with our </span>
							<a href="https://about.aspose.app/legal/tos" target="_blank">Terms of Service</a>
							<span> and </span>
							<a href="https://about.aspose.app/legal/privacy-policy" target="_blank">Privacy Policy</a>
							<span>.</span>
						</div>
						@if (!string.IsNullOrEmpty(Model.ControlsView))
						{
							@await Html.PartialAsync(Model.ControlsView)
						}
					</form>
				</div>
				@await Html.PartialAsync("Download", Model)
				<div id="TextPlaceHolder" class="">
					<div class="watermark" style="margin-bottom: 0; margin-top: 30px;">
						<textarea name="Text" id="textWatermark" class="form-control" aria-describedby="basic-addon2" placeholder="Add Watermark Text"></textarea>
						<br>
					</div>
					<div class="colorpicker">
						<div class="form-inline">
							<div class="color-wrapper">
								<input name="Color" type="text" id="pickcolor" placeholder="#99FF66" value="#99FF66" class="call-picker">
								<div class="color-holder call-picker"></div>
								<div class="color-picker" id="color-picker" style="display: none;"></div>
							</div>
						</div>
					</div>
					<br />
					<div class="convertbtn">
						<input type="hidden" name="id" />
						<input type="hidden" name="FileName" />
						<div class="convertbtn">
							<input type="button" value="Add Watermark" id="uploadButton" class="btn btn-success btn-lg">
						</div>
					</div>
				</div>
				<div id="alertPlaceHolder" class="col-md-12">
					<br />
					<p id="alertMessage" class="alert alert-danger hidden"></p>
					<p id="alertSuccess" class="alert alert-success hidden"></p>
				</div>

				<div id="loaderPlaceHolder">
					<div id="loader" class="hidden" role="status" aria-hidden="true">
						<div class="progress">
							<div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" style="width: 15%">15%</div>
						</div>
					</div>
				</div>				

				<div class="col-md-12">
					<p id="statProcessed" class="hidden">
						We've already processed
						<span id="processedFiles"></span>
						files with total size of
						<span id="processedBytes"></span>
						Mbyte
					</p>
				</div>
			</div>
		</div>
	</div>
</div>



@await Html.PartialAsync("FooterProduct")

<link rel="stylesheet" href="~/cells/@Model.AppName.ToLower()/content/css/colorpicker.css" type="text/css" />
<script src="~/cells/@Model.AppName.ToLower()/content/scripts/colorpicker.js"></script>

@section scripts {
	<script type="text/javascript">
        const o = @Html.Raw(Model.JSOptions);
        $.extend(o, {
            Method: requestWatermark,
            validationWatermark: "@Html.Raw(Model.Resources["cellsWatermarkTextMessage"])"
        });
	</script>
}